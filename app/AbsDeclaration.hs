

module AbsDeclaration where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = FnDef Type Ident [Arg] Block
    | GlobDecl Type [Item]
    | GlobFinDecl Type [Item]
    | StructDef Ident [StructDecl]
  deriving (Eq, Ord, Show, Read)

data StructDecl = Field Type Ident
  deriving (Eq, Ord, Show, Read)

data StructField = StructField Ident
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | DeclFinal Type [Item]
    | Ass Ident Expr
    | ArrAss Ident Integer Expr
    | StructAss [StructField] Expr
    | Incr Ident
    | Decr Ident
    | Ret Expr
    | VRet
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | SExp Expr
    | FnInDef Type Ident [Arg] Block
    | ConstFor Type Ident Expr Expr Stmt
    | Break
    | Continue
    | Try Block [Catch]
    | Throw Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Catch = Catch Arg Block
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Bool
    | Void
    | StructType Ident
    | FuncType [Type] Type
    | ArrayType Type
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ENull
    | ELitInt Integer
    | ELitTrue
    | SLitString String
    | ELitFalse
    | EApp Ident [Expr]
    | EArray [Expr]
    | EArrayIdx Ident Integer
    | EField [StructField]
    | ELambda [Arg] Type Block
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

